package com.ijin.hanaro.stats;

import lombok.RequiredArgsConstructor;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class DataExportService {

    private final JdbcTemplate jdbc;

    public record ExportResult(int users, int products, int productImages, int orders, int orderItems) {}

    /** 프로젝트 루트 기준: src/main/resources/data/data.sql 로 내보내기 */
    public ExportResult exportProjectDataSql() throws IOException {
        Path path = Path.of("src/main/resources/data/data.sql");
        Files.createDirectories(path.getParent());
        try (BufferedWriter out = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {
            return export(out);
        }
    }

    /** writer 로 SQL 스크립트 작성 */
    public ExportResult export(BufferedWriter out) throws IOException {
        out.write("-- generated by DataExportService\n");
        out.write("SET FOREIGN_KEY_CHECKS=0;\n\n");

        // 1) 테이블 TRUNCATE (FK 순서 고려)
        out.write("TRUNCATE TABLE order_items;\n");
        out.write("TRUNCATE TABLE orders;\n");
        out.write("TRUNCATE TABLE product_images;\n");
        out.write("TRUNCATE TABLE products;\n");
        out.write("TRUNCATE TABLE users;\n\n");

        // 2) users
        List<Map<String, Object>> users = jdbc.queryForList("""
            SELECT id, username, password, nickname, phone, role, enabled, deleted_at
            FROM users ORDER BY id
        """);
        for (Map<String, Object> r : users) {
            out.write("INSERT INTO users (id, username, password, nickname, phone, role, enabled, deleted_at) VALUES (");
            out.write(num(r.get("id")) + ", " + str(r.get("username")) + ", " + str(r.get("password")) + ", "
                    + str(r.get("nickname")) + ", " + str(r.get("phone")) + ", " + str(r.get("role")) + ", "
                    + bool(r.get("enabled")) + ", " + ts(r.get("deleted_at")) + ");\n");
        }
        out.write("\n");

        // 3) products
        List<Map<String, Object>> products = jdbc.queryForList("""
            SELECT id, name, price, stock_quantity, description, main_image_path, is_deleted
            FROM products ORDER BY id
        """);
        for (Map<String, Object> r : products) {
            out.write("INSERT INTO products (id, name, price, stock_quantity, description, main_image_path, is_deleted) VALUES (");
            out.write(num(r.get("id")) + ", " + str(r.get("name")) + ", " + dec(r.get("price")) + ", "
                    + num(r.get("stock_quantity")) + ", " + str(r.get("description")) + ", "
                    + str(r.get("main_image_path")) + ", " + bool(r.get("is_deleted")) + ");\n");
        }
        out.write("\n");

        // 4) product_images
        List<Map<String, Object>> images = jdbc.queryForList("""
            SELECT id, product_id, original_name, stored_name, stored_path, size_bytes, checksum_sha256, primary_image
            FROM product_images ORDER BY id
        """);
        for (Map<String, Object> r : images) {
            out.write("INSERT INTO product_images (id, product_id, original_name, stored_name, stored_path, size_bytes, checksum_sha256, primary_image) VALUES (");
            out.write(num(r.get("id")) + ", " + num(r.get("product_id")) + ", " + str(r.get("original_name")) + ", "
                    + str(r.get("stored_name")) + ", " + str(r.get("stored_path")) + ", "
                    + num(r.get("size_bytes")) + ", " + str(r.get("checksum_sha256")) + ", "
                    + bool(r.get("primary_image")) + ");\n");
        }
        out.write("\n");

        // 5) orders
        List<Map<String, Object>> orders = jdbc.queryForList("""
            SELECT id, user_id, order_no, status, created_at, status_updated_at, paid_at, total_price
            FROM orders ORDER BY id
        """);
        for (Map<String, Object> r : orders) {
            out.write("INSERT INTO orders (id, user_id, order_no, status, created_at, status_updated_at, paid_at, total_price) VALUES (");
            out.write(num(r.get("id")) + ", " + num(r.get("user_id")) + ", " + str(r.get("order_no")) + ", "
                    + str(r.get("status")) + ", " + ts(r.get("created_at")) + ", " + ts(r.get("status_updated_at")) + ", "
                    + ts(r.get("paid_at")) + ", " + dec(r.get("total_price")) + ");\n");
        }
        out.write("\n");

        // 6) order_items
        List<Map<String, Object>> orderItems = jdbc.queryForList("""
            SELECT id, order_id, product_id, product_name, quantity, unit_price
            FROM order_items ORDER BY id
        """);
        for (Map<String, Object> r : orderItems) {
            out.write("INSERT INTO order_items (id, order_id, product_id, product_name, quantity, unit_price) VALUES (");
            out.write(num(r.get("id")) + ", " + num(r.get("order_id")) + ", " + num(r.get("product_id")) + ", "
                    + str(r.get("product_name")) + ", " + num(r.get("quantity")) + ", " + dec(r.get("unit_price")) + ");\n");
        }

        out.write("\nSET FOREIGN_KEY_CHECKS=1;\n");
        out.flush();

        return new ExportResult(
                users.size(),
                products.size(),
                images.size(),
                orders.size(),
                orderItems.size()
        );
    }

    private static String num(Object v) { return (v == null) ? "NULL" : v.toString(); }
    private static String dec(Object v) {
        if (v == null) return "NULL";
        if (v instanceof BigDecimal bd) return bd.toPlainString();
        return v.toString();
    }
    private static String bool(Object v) {
        if (v == null) return "NULL";
        if (v instanceof Boolean b) return b ? "1" : "0";
        if (v instanceof Number n) return n.intValue() != 0 ? "1" : "0";
        return ("true".equalsIgnoreCase(v.toString()) ? "1" : "0");
    }
    private static String ts(Object v) {
        if (v == null) return "NULL";
        if (v instanceof Timestamp t) return quote(t.toLocalDateTime().toString().replace('T', ' '));
        if (v instanceof LocalDateTime ldt) return quote(ldt.toString().replace('T',' '));
        if (v instanceof LocalDate ld) return quote(ld.atStartOfDay().toString().replace('T',' '));
        return quote(v.toString());
    }
    private static String str(Object v) {
        if (v == null) return "NULL";
        return quote(v.toString());
    }
    private static String quote(String s) {
        String esc = s.replace("'", "''");
        return "'" + esc + "'";
    }
}